// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id String @id @default(cuid())

  username    String  @unique
  displayName String  @map("display_name")
  password    String
  role        Role    @default(USER)
  avatarUrl   String? @map("avatar_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  likes     Like[]
  comments  Comment[]
  followers Follower[]
  chats     Chat[]
  messages  Message[]
  posts     Post[]

  @@map("users")
}

model Post {
  id String @id @default(uuid())

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  content String

  Like    Like[]
  Comment Comment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model Like {
  id Int @id @default(autoincrement())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@map("likes")
}

model Comment {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}

model Follower {
  id Int @id @default(autoincrement())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  followerId String @map("follower_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("followers")
}

model Chat {
  id String @id @default(uuid())

  users User[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  messages  Message[]

  @@map("chats")
}

model Message {
  id String @id @default(uuid())

  senderId String @map("author_id")
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  chatId String @map("chat_id")
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  content String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("messages")
}
